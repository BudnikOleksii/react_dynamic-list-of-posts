{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","components/Loader/Loader.tsx","api/apiHelper.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","onSelectedPostId","className","map","post","userId","title","id","type","onClick","BASE_URL","ENDPOINTS","request","query","options","fetch","then","res","ok","Error","status","json","catch","err","Response","getPostComments","postId","NewCommentForm","handleUpdate","useState","name","setName","email","setEmail","body","setBody","onSubmit","event","newComment","preventDefault","method","headers","JSON","stringify","placeholder","value","onChange","target","getUserPosts","getPostDetails","Loader","apiHelper","getData","handleLoading","handleError","Promise","reject","resolve","finally","PostDetails","setPost","isLoading","setIsLoading","errorMsg","setErrorMsg","comments","setComments","isHide","setIsHide","needUpdate","setNeedUpdate","useEffect","removeCommentById","commentId","deleteCommentById","prevState","length","comment","App","setPosts","setUserId","setSelectedPostId","isPostsLoaded","setIsPostsLoaded","users","setUsers","uniqueIds","Set","usersRequests","Array","from","getUserById","all","data","Number","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86482c03.chunk.js","sourcesContent":["import { FC } from 'react';\nimport './PostsList.scss';\nimport { Post } from '../../types/Post';\n\ninterface Props {\n  posts: Post[];\n  selectedPostId: number;\n  onSelectedPostId: (postId: number) => void;\n}\n\nexport const PostsList: FC<Props> = ({\n  posts,\n  selectedPostId,\n  onSelectedPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\" data-cy=\"postList\">\n      {posts.map(post => (\n        <li className=\"PostsList__item\" key={post.id}>\n          <div>\n            <b>{`[User #${post.userId}]: `}</b>\n            {post.title}\n          </div>\n          {selectedPostId === post.id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => onSelectedPostId(0)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => onSelectedPostId(post.id)}\n            >\n              Open\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\nexport const ENDPOINTS = {\n  posts: '/posts',\n  comments: '/comments',\n  users: '/users',\n};\n\nexport const request = <T>(query: string, options = {}): Promise<T> => {\n  return fetch(`${BASE_URL}${query}`, options)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`Error: ${res.status}`);\n      }\n\n      return res.json();\n    })\n    .catch((err) => ({\n      Response: 'False',\n      Error: `${err}`,\n    }));\n};\n","import { ENDPOINTS, request } from './api';\nimport { ResponseError } from '../types/ResponseError';\nimport { Comment } from '../types/Comment';\n\ntype CommentPromise = Comment | ResponseError;\n\nexport const getPostComments = (postId: number) => (\n  request<CommentPromise>(`${ENDPOINTS.comments}?postId=${postId}`)\n);\n\nexport const deleteCommentById = (commentId: number) => (\n  request<CommentPromise>(`${ENDPOINTS.comments}/${commentId}`, { method: 'DELETE' })\n);\n\nexport const addComment = (newComment: Omit<Comment, 'id'>) => (\n  request<CommentPromise>(\n    ENDPOINTS.comments,\n    {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json; charset=utf-8',\n      },\n      body: JSON.stringify(newComment),\n    },\n  )\n);\n","import { FC, FormEvent, useState } from 'react';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/comments';\n\ninterface Props {\n  postId: number,\n  handleUpdate: (bool: boolean) => void;\n}\n\nexport const NewCommentForm: FC<Props> = ({ postId, handleUpdate }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addComment({\n      postId,\n      name,\n      email,\n      body,\n    }).then(() => handleUpdate(true));\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { ENDPOINTS, request } from './api';\nimport { Post } from '../types/Post';\nimport { ResponseError } from '../types/ResponseError';\n\nexport const getUserPosts = (userId: number) => {\n  const query = userId ? `${ENDPOINTS.posts}?userId=${userId}` : `${ENDPOINTS.posts}`;\n\n  return request<Post[] | ResponseError>(query);\n};\n\nexport const getPostDetails = (postId: number) => (\n  request<Post | ResponseError>(`${ENDPOINTS.posts}/${postId}`)\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const apiHelper = (\n  getData: (postId: number) => Promise<any>,\n  id: number,\n  handleLoading: (bool: boolean) => void,\n  handleError: (bool: string) => void,\n) => {\n  handleLoading(true);\n\n  const result = getData(id)\n    .then(res => {\n      if ('Error' in res) {\n        return Promise.reject(res.Error);\n      }\n\n      return Promise.resolve(res);\n    })\n    .catch(handleError)\n    .finally(() => handleLoading(false));\n\n  return result;\n};\n","import { FC, useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Post } from '../../types/Post';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { apiHelper } from '../../api/apiHelper';\nimport { deleteCommentById, getPostComments } from '../../api/comments';\nimport { Comment } from '../../types/Comment';\n\ninterface Props {\n  postId: number,\n}\n\nexport const PostDetails: FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isHide, setIsHide] = useState(false);\n  const [needUpdate, setNeedUpdate] = useState(false);\n\n  useEffect(() => {\n    apiHelper(\n      getPostDetails,\n      postId,\n      setIsLoading,\n      setErrorMsg,\n    ).then(setPost);\n  }, [postId]);\n\n  useEffect(() => {\n    apiHelper(\n      getPostComments,\n      postId,\n      setIsLoading,\n      setErrorMsg,\n    ).then(setComments);\n\n    setNeedUpdate(false);\n  }, [postId, needUpdate]);\n\n  const removeCommentById = (commentId: number) => {\n    deleteCommentById(commentId)\n      .then(() => setNeedUpdate(true));\n  };\n\n  return (\n    <>\n      {post && !errorMsg && (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\" data-cy=\"postDetails\">\n            <p>{post.title}</p>\n          </section>\n\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setIsHide(prevState => !prevState)}\n              >\n                {`${isHide ? 'Show' : 'Hide'} ${comments.length}`}\n              </button>\n\n              {!isHide && (\n                <ul className=\"PostDetails__list\" data-cy=\"postList\">\n                  {comments.map(comment => (\n                    <li key={comment.id} className=\"PostDetails__list-item\">\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => removeCommentById(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                handleUpdate={setNeedUpdate}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n      {isLoading && <Loader />}\n      {errorMsg && <div>{`Something went wrong... ${errorMsg}`}</div>}\n    </>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\nimport { Loader } from './components/Loader';\nimport { apiHelper } from './api/apiHelper';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { getUserById } from './api/users';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isPostsLoaded, setIsPostsLoaded] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    apiHelper(\n      getUserPosts,\n      userId,\n      setIsLoading,\n      setErrorMsg,\n    ).then(res => {\n      setPosts(res);\n\n      if (!isPostsLoaded) {\n        setIsPostsLoaded(true);\n      }\n    });\n  }, [userId]);\n\n  useEffect(() => {\n    const uniqueIds = new Set(posts.map(post => post.userId));\n    const usersRequests = Array.from(uniqueIds).map(id => getUserById(id));\n\n    Promise.all(usersRequests)\n      .then(data => {\n        if ('Error' in data) {\n          throw new Error('error');\n        } else {\n          setUsers(data);\n        }\n      });\n  }, [isPostsLoaded]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={(event) => setUserId(Number(event.target.value))}\n          >\n            <option value=\"0\">All users</option>\n            {users.length > 0 && (\n              users.map(user => (\n                <option key={user.id} value={user.id}>{user.name}</option>\n              ))\n            )}\n          </select>\n        </label>\n      </header>\n\n      {!isLoading && !errorMsg && (\n        <main className=\"App__main\">\n          <div className=\"App__sidebar\">\n            <PostsList\n              posts={posts}\n              selectedPostId={selectedPostId}\n              onSelectedPostId={setSelectedPostId}\n            />\n          </div>\n\n          {selectedPostId !== 0 && (\n            <div className=\"App__content\">\n              <PostDetails postId={selectedPostId} />\n            </div>\n          )}\n        </main>\n      )}\n      {isLoading && <Loader />}\n      {errorMsg && <div>{`Something went wrong... ${errorMsg}`}</div>}\n    </div>\n  );\n};\n\nexport default App;\n","import { ENDPOINTS, request } from './api';\nimport { User } from '../types/User';\n\nexport const getUserById = (userId: number) => (\n  request<User>(`${ENDPOINTS.users}/${userId}`)\n);\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}